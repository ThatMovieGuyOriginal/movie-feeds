name: Update Daily Discovery List

on:
  schedule:
    - cron: '0 */12 * * *' # Runs every 12 hours
  workflow_dispatch: # Enables manual runs
  
jobs:
  update-daily-discovery:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          persist-credentials: false  # Disable default token to use PAT explicitly

      - name: Install dependencies
        run: sudo apt-get install -y csvkit

      - name: Prepare Used Movies List
        run: |
          # If previously_used_movies.csv does not exist, create it with headers
          if [ ! -f movies/previously_used_movies.csv ]; then
            echo "title,year,imdb_id,tmdb_id,released,url" > movies/previously_used_movies.csv
          fi

      - name: Select Random Movies Excluding Previously Used Movies
        run: |
          # Clear daily_discovery.csv and add headers
          echo "title,year,imdb_id,tmdb_id,released,url" > movies/daily_discovery.csv

          # Concatenate all master movie lists, select only required columns, skip headers, and filter out previously used movies
          selected_movies=$(awk 'FNR > 1 {print $0}' movies/master_movie_list_*.csv 2>/dev/null | \
            tail -n +2 | \
            csvcut -c 3,4,7,8,11,10 2>/dev/null | \
            csvgrep -i -c 3 -f movies/previously_used_movies.csv 2>/dev/null | \
            shuf -n 5)

          # Log the raw selected_movies output with file information for debugging
          echo "Raw selected movies output with source file:"
          echo "$selected_movies"

          # Check if exactly five movies were selected
          if [ -z "$selected_movies" ] || [ $(echo "$selected_movies" | wc -l) -ne 5 ]; then
            echo "Error: Less than five unique movies available for selection or no valid movies were found. Skipping this run."
            exit 1
          else
            echo "Selected movies for daily discovery:"
            # Format each selected movie with quotes around each field before appending
            while IFS= read -r line; do
              echo "Processing line: $line"  # Log the line being processed

              filename=$(echo "$line" | cut -d',' -f1)
              movie_data=$(echo "$line" | cut -d',' -f2-)

              title=$(echo "$line" | cut -d',' -f1)
              year=$(echo "$line" | cut -d',' -f2)
              imdb_id=$(echo "$line" | cut -d',' -f3)
              tmdb_id=$(echo "$line" | cut -d',' -f4)
              released=$(echo "$line" | cut -d',' -f5)
              url=$(echo "$line" | cut -d',' -f6)

              # Use default value "" for any missing fields to maintain CSV structure
              title="${title:-""}"
              year="${year:-""}"
              imdb_id="${imdb_id:-""}"
              tmdb_id="${tmdb_id:-""}"
              released="${released:-""}"
              url="${url:-""}"

              # Log each parsed field to catch any parsing issues
              echo "  Source File: $filename"
              echo "  Title: $title"
              echo "  Year: $year"
              echo "  IMDB ID: $imdb_id"
              echo "  TMDB ID: $tmdb_id"
              echo "  Released: $released"
              echo "  URL: $url"
              
              formatted_line="\"$title\",\"$year\",\"$imdb_id\",\"$tmdb_id\",\"$released\",\"$url\""
              echo "$formatted_line" >> movies/daily_discovery.csv
              echo "  - $title"  # Log each movie title being added to daily_discovery.csv
            done <<< "$selected_movies"
          fi

      - name: Append Unique Movies to Previously Used Movies List
        run: |
          # Append only unique entries from daily_discovery.csv to previously_used_movies.csv
          echo "Appending movies to previously_used_movies.csv:"
          while IFS=, read -r title year imdb_id tmdb_id released url; do
            # Use default values for missing fields to maintain consistent structure
            title="${title:-""}"
            year="${year:-""}"
            imdb_id="${imdb_id:-""}"
            tmdb_id="${tmdb_id:-""}"
            released="${released:-""}"
            url="${url:-""}"
            
            # Check if the tmdb_id already exists in previously_used_movies.csv to prevent duplicates
            if ! grep -q "$tmdb_id" movies/previously_used_movies.csv; then
              # Append the line without additional quotes
              echo "$title,$year,$imdb_id,$tmdb_id,$released,$url" >> movies/previously_used_movies.csv
              echo "  - $title"  # Log each movie title being appended to previously_used_movies.csv
            fi
          done < <(tail -n +2 movies/daily_discovery.csv)

      - name: Format Previously Used Movies List
        run: |
          # Add header manually to a new temporary file without extra quotes
          echo "title,year,imdb_id,tmdb_id,released,url" > movies/previously_used_movies_temp.csv

          # Format the data rows and append them to the new file without additional quotes
          tail -n +2 movies/previously_used_movies.csv | csvformat -U 1 >> movies/previously_used_movies_temp.csv

          # Replace the original file with the formatted one
          mv movies/previously_used_movies_temp.csv movies/previously_used_movies.csv

      - name: Commit and push changes
        env:
          DAILY_DISCOVERY_PAT: ${{ secrets.DAILY_DISCOVERY_PAT }}
        run: |
          git config --local user.email "ThatMovieGuyOriginal@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          git remote set-url origin https://$DAILY_DISCOVERY_PAT@github.com/ThatMovieGuyOriginal/movie-feeds.git
          git add movies/daily_discovery.csv movies/previously_used_movies.csv
          git commit -m "Update free movies for RSS feed and log used movie"
          git push origin main

      # New step to trigger Vercel redeployment after CSV updates
      - name: Trigger Vercel Redeploy for RSS Feed Update
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          curl -X POST "https://api.vercel.com/v1/integrations/deploy/prj_EY5snfMLMgzIPC5E68pLuR6MLYsu" \
          -H "Authorization: Bearer $VERCEL_TOKEN" \
          -H "Content-Type: application/json" \
          -d '{ "force": true }'

      # New step to trigger Vercel webhook for image generation if RSS feed changes
      - name: Trigger Vercel Image Generation Webhook
        env:
          VERCEL_DEPLOY_HOOK_URL: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}
        run: |
          curl -X POST "$VERCEL_DEPLOY_HOOK_URL"
